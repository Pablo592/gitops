# Cluster donde será desplegado el proyecto
# Puede ser 'prod', 'dev' o 'lab'
# Default: dev
cluster: "dev"

# Especificar la version del chart a utilizar
chart_version: "4.3.0"

# 'group' será utilizado como el namespace de Kubernetes
# 'project' será utilizado como el nombre de recursos
group: "apache"
project: "apache"
area: "psi"  # Área a la que pertenece el proyecto (desarrollo, datawarehouse, servicios). Default: psi

type: "Deployment"  #Deployment; CronJob
crontab: "0 12 * * 0"


# Habilitar Argo Rollouts en lugar de Deployment
# Se va levantando de a poco la nueva versión de la app
# y se van bajando las réplicas de la versión anterior
# Permite hacer rollbacks más fácilmente
rollout:
  enabled: false


# Annotations para el deployment/ CronJob
annotations:
  enabled: false
  list:
    reloader.stakater.com: "true"
    someother/annotation: enabled


# Annotations para el pod
annotationsPod:
  enabled: false
  list:
    reloader.stakater.com: "true"
    someother/annotation: enabled

hostAliases:
  enabled: false
  aliases:
   - ip: "192.168.1.100"
     hostnames:
     - "example.local"
     - "example2.local"
   - ip: "192.168.1.101"
     hostnames:
     - "service.local"

  # El initContainer se ejecuta antes que el contenedor principal
  # El mismo tiene montados los mismos volúmenes, secretos y configmaps 
  # que el contenedor principal
  # La diferencia es que no hay una app ejecutandose en el mismo.
  # Puede ser utilizado para realizar modificaciones antes de que la aplicación se ejecute

initContainer:
    enabled: false
    command:
      container_shell: "/bin/sh" # "/bin/sh" o "/bin/bash"
      args:
        - |
          echo "initContainer"

image:
  name: "harbor.com.ar/docker-hub/httpd"
  tag: "alpine"
  pullPolicy: IfNotPresent # Puede ser 'Always', 'IfNotPresent' o 'Never'

command:
  enabled: false
  container_shell: "/bin/sh" # "/bin/sh" o "/bin/bash"
  args:
    - |
      echo "Ejecutando comando"
      echo "Hola Mundo"
      #while true; do echo "ocupando CPU"; sha256sum /dev/zero; done
      #sleep infinity


port:
  port: 80
  targetPort: 80


env:
  enabled: false
  list:
    - name: KC_HTTPS_CERTIFICATE_FILE
      value: /opt/cert/tls.crt 
    - name: KC_HTTPS_CERTIFICATE_KEY_FILE
      value: /opt/key/tls.key  
    - name: KC_HEALTH_ENABLED
      value: "true"

secrets:
  enabled: false
  list:
    - name: AUTH_JWT_SECRET
      path: "dev/sigeva/sigeva-api"
      key: "AUTH_JWT_SECRET"
    - name: DB_PASSWORD
      path: "dev/sigeva/sigeva-api"
      key: "DB_PASSWORD"
    - name: DATABASE_DRIVER
      path: "dev/ojs"
      key: "DATABASE_DRIVER"

fileFromSecret:
  enabled: false
  list:
    - fileName: "config.properties"
      path: "dev/sigeva/sigeva-api"
      secretKey: "AUTH_JWT_SECRET"
      mount: "/etc/config"
    - fileName: "any.properties"
      path: "dev/ojs"
      secretKey: "DATABASE_DRIVER"
      mount: "/other/mount"

environmentFromSecret:
  enabled: false
  list:
    - path: "dev/soporte_faud/databases"
    - path: "dev/longhorn-system/backup-target-minio"


volumes:
  enabled: false
  list:
    - size: 5Gi
      retain: false # puede ser false o true. Si es true, el PVC no se borra al eliminar el deployment
      mounts: 
        - /etc/other/storage
        - /var/lib/other
    - size: 10Gi
      retain: false  # puede ser false o true. Si es true, el PVC no se borra al eliminar el deployment
      mounts: 
        - /etc/other/almacenaje
        - /var/lib/otro

resources:
  requests:
    cpu: "250m"
    memory: "512Mi"
  limits:
    cpu: "1000m"
    memory: "2048Mi"

configMaps:
  enabled: false
  list:
    - name: init.sh
      data: |
            #ejemplo
            comdocII.release=3.0
            # Infijo que forma parte del CUDAP, que se asignará a todos los elementos creados
            comdocII.server=UNC
            # Cantidad máxima de megabytes que se pueden subir como archivos adjuntos
            # dentro de un documento
            comdocII.max-upload=20
            # Link ofrecido para descargar lector de archivos PDF
            comdocII.downloads.visor-pdf=http://adobe.com/reader
      path: /opt/map1
      chmod: 0755

hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80


# Ingress
ingress:
    enabled: false
    ingressClassName: "" # IngressClassName por defecto es 'nginx'
    hosts: # Todos los hosts apuntaran al mismo servicio
    -  host: "k8s-ejemplo3.com.ar"
       annotations:
          enabled: false
          list:
            nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
       oauth2ProxyUsers: 
        #  - nombre.apellido@gmail.com

       allowedIPs: 
        #- 172.16.59.65
        #-
        #-
        #-

    -  host: "k8s-ejemplo4.com.ar"
       annotations:
          enabled: false
          list:
            nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
       oauth2ProxyUsers: 
        #  - nombre.apellido@gmail.com
       allowedIPs:
        #- 172.16.59.65
        #-
        #-
        #-



# Probes
probes:
  # Habilitar para que se realicen 'probes' sobre los contenedores
  enabled: false
  # URL para verificar que la aplicación está lista para recibir tráfico
  startup:
    # Por defecto, se realiza la prueba cada 2 segundos en el path /test
    path: /test
    periodSeconds: 10
    # Si falla 5 veces seguidas, se considera que la aplicación no está lista
    failureThreshold: 5
  # URL para verificar que la aplicación sigue viva
  liveness: 
    # Por defecto, se realiza la prueba cada 30 segundos en el path /healthcheck
    path: /healthcheck
    initialDelaySeconds: 60
    failureThreshold: 5
    periodSeconds: 30
