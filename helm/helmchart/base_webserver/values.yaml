# Falta mejorar el formato del ingress con todas sus configuraciones
# Agregar annotations
# Agregar oauth
# Agregar probes

# Ver si se puede reemplazar el pipeline para crear el cliente en keycloak

#Borrador/ ejemplo


#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: mi-app
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: mi-app
#  template:
#    metadata:
#      labels:
#        app: mi-app
#    spec:
#      volumes:
#        - name: token-vol
#          emptyDir: {}
#      initContainers:
#        - name: generador-token
#          image: alpine:3.19
#          command:
#            - sh
#            - -c
#            - |
#              TOKEN="TOKEN-$(date +%s)"
#              echo $TOKEN > /token/token.txt
#              chmod 600 /token/token.txt
#          volumeMounts:
#            - name: token-vol
#              mountPath: /token
#      containers:
#        - name: app-principal
#          image: alpine:3.19
#          command:
#            - sh
#            - -c
#            - |
#              export TOKEN=$(cat /app/token/token.txt)
#              echo "Token en variable de entorno: $TOKEN"
#              exec sleep 3600   # aquí iría tu app real
#          volumeMounts:
#            - name: token-vol
#              mountPath: /app/token






# Cluster donde será desplegado el proyecto
# Puede ser 'prod', 'dev' o 'lab'
# Default: dev
cluster: "prod"

# Especificar la version del chart a utilizar
chart_version: "1.0.0"

# 'group' será utilizado como el namespace de Kubernetes
# 'project' será utilizado como el nombre de recursos
group: "grupo-gitlab"
project: "proyecto"
owner: "owner"

type: "2"  # Deployment = 1 ; CronJob = 2
crontab: "0 12 * * 0"


# Annotations para el deployment/ CronJob
annotations:
  enabled: true
  list:
    - name: reloader.stakater.com/auto
      value: "true"
    - name: someother/annotation
      value: enabled


# Annotations para el pod
annotationsPod:
  enabled: true
  list:
    - name: reloader.stakater.com/auto
      value: "true"
    - name: someother/annotation
      value: enabled



image:
  name: "harbor.psi.unc.edu.ar/docker-hub/httpd"
  tag: "latest"
  pullPolicy: IfNotPresent # Puede ser 'Always', 'IfNotPresent' o 'Never'

#command:
#  container_shell: "/bin/sh" # "/bin/sh" o "/bin/bash"
#  args:
#    - |
#      echo "Ejecutando comando"
#      echo "Hola Mundo"
#      #while true; do echo "ocupando CPU"; sha256sum /dev/zero; done
#      sleep infinity


port:
  port: 80
  name: http
  targetPort: 80


env:
  - name: KC_HTTPS_CERTIFICATE_FILE
    value: /opt/cert/tls.crt 
  - name: KC_HTTPS_CERTIFICATE_KEY_FILE
    value: /opt/key/tls.key  
  - name: KC_HEALTH_ENABLED
    value: "true"

secrets:
  - name: SECRET_ENV_VAR
    path: "path/in/vault"
    key: "key-in-vault"
  - name: SECRET_ENV_VAR2
    path: "path/in/vault2"
    key: "key-in-vault2"

fileFromSecret:
    - fileName: "config.properties"
      path: "path/in/vault"
      secretKey: "key-in-vault"
      mount: "/etc/config"
    - fileName: "any.properties"
      path: "dev/apache"
      secretKey: "other-key-in-vault"
      mount: "/other/mount"

environmentFromSecret:
    - path: "path/in/vault"
    - path: "path/in/vault2"
    - path: "path/in/vault3"



volumes:
  - size: 5Gi
    mount: /etc/storage
  - size: 10Gi
    mount: /etc/other/storage

resources:
  requests:
    cpu: "250m"
    memory: "512Mi"
  limits:
    cpu: "1000m"
    memory: "2048Mi"

configMaps:
  - name: init.sh
    data: |
          #ejemplo
          comdocII.release=3.0
          # Infijo que forma parte del CUDAP, que se asignará a todos los elementos creados
          comdocII.server=UNC
          # Cantidad máxima de megabytes que se pueden subir como archivos adjuntos
          # dentro de un documento
          comdocII.max-upload=20
          # Link ofrecido para descargar lector de archivos PDF
          comdocII.downloads.visor-pdf=http://adobe.com/reader
    path: /opt/map1
    chmod: 0755

hpa:
  minReplicas: 1
  maxReplicas: 4
  targetCPUUtilizationPercentage: 80


# Ingress
ingress:
    enabled: true
    ingressClassName: "" # IngressClassName por defecto es 'nginx'
    hosts: # Todos los hosts apuntaran al mismo servicio
    -  host: "k8s-ejemplo.dev.unc.edu.ar"
       annotations:
          enabled: true
          list:
            nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
       oauth2ProxyUsers: []
          #- nombre.apellido@unc.edu.ar

       allowedIPs: 
        - 192.168.1.1
        - 192.168.1.2
        - 192.168.1.3
        - 192.168.1.4
        - 192.168.1.5
        - 192.168.1.6
        - 192.168.1.7
        - 192.168.1.8
        - 192.168.1.9
        - 192.168.1.10
        #-
        #-
        #-

    -  host: "k8s-ejemplo2.dev.unc.edu.ar"
       annotations:
          enabled: true
          list:
            nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
       oauth2ProxyUsers: []
          #- nombre.apellido@unc.edu.ar
       allowedIPs:
        - 192.168.1.1
        - 192.168.1.2
        - 192.168.1.3
        - 192.168.1.4
        - 192.168.1.5
        - 192.168.1.6
        - 192.168.1.7
        - 192.168.1.8
        - 192.168.1.9
        - 192.168.1.10
        #-
        #-
        #-
